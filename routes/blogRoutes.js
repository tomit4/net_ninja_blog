const express = require('express');
// const Blog = require('../models/blog');
const blogController = require('../controllers/blogController');

const router = express.Router();

router.get('/', blogController.blog_index);//(req, res) => {
    // Blog.find().sort({ createdAt: -1 }) //the .find method finds all instances of Blogs and then sorts them from newest to oldest (as defined by the parameter { createdAt: -1 }, this is automatically generated by mongoose)
    //     .then((result) => {
    //         res.render('index', { title: 'All Blogs', blogs: result })
    //     })
    //     .catch((err) => {
    //         console.log(err);
    //     })
// });

router.post('/', blogController.blog_create_post);//(req, res) => {
//     const blog = new Blog(req.body);
//     //if we were to try and create a new instance of Blog right, here, we would do new Blog({}), but in this case, due to teh app.use(express.urlencoded) method above, we can pass the object created by the requested text from the submit fields on create.ejs

//     blog.save() //we save the blog and:
//         .then((result) => {
//             res.redirect('/blogs');// redirect the user back to the /blogs directory to see their new blog displayed
//         })
//         .catch((err) => {
//             console.log(err);
//         })
// })

router.get('/create', blogController.blog_create_get);//(req, res) => {
//     res.render('create', { title: 'Create a new Blog' });
// })

router.get('/:id', blogController.blog_details); //this is setting up the get request for the blog itself, anchor/link tags have been put into index.ejs which now redirect to a 404 page, because the id of the blog is not established, note the colon, which is necessary to pull the id of the blog we want to view.
    // const id = req.params.id;
    // Blog.findById(id)
    //     .then((result) => {
    //         res.render('details', { blog: result, title: 'Blog Details' });
    //     })
    //     .catch((err) => {
    //         console.log(err);
    //     });
// })

//just redirects to the /blogs directory
    // const blogs = [
    //     {title: 'Yoshi finds eggs', snippet: 'Lorem ipsum dolor sit amet consectetur'},
    //     {title: 'Mario finds stars', snippet: 'Lorem ipsum dolor sit amet consectetur'},
    //     {title: 'How to defeat bowser', snippet: 'Lorem ipsum dolor sit amet consectetur'}
    // ];
    
    // res.render('index', { title: 'Home', blogs }); //uses the ejs module to render the index.ejs html page
    // //it will also pass the blogs array to any ejs page that dynamically can generate the content by referencing it (see index.ejs)


    // res.write('');//very much like the server.js which uses pure node to do this, res.write('') takes a string and will, in this case, write it as pure http
    // res.end();//and end the response

    // res.send('<p>home page</p>');//the inferred content type is header, and the status code is inferred as well as 200 (successful)
    // res.sendFile('./views/index.html', { root: __dirname }); //and this is similar to our server.js, but using express syntax.
    //note the second parameter that specifies the root directory as the current directory, or "__dirname", which in this case would be from nodejs-server directory.
    //if this is not defined, sendFile() will try and route from the home directory...



// app.use((req, res, next) => { //another example of middleware
//     console.log('in the next middleware');
//     next();
// });

//note that when a request to the server is sent, express will treat the following as if they were if/else or switch/case statements,
//interestingly though, the app.get() function allows us to shorten our syntax by implying the switch/case as well as the break statements
//the defaut statement is referred in express by the app.use() funciton, which you should note does not require a url in its arguments

//redirects
// app.get('/about-us', (req, res) => { //very simply, much like in server.js, will redirect the user if they type in the url address bar "/about-us" will redirect to the about page
//     res.redirect('/about');
// });


// blog routes
router.get('/');

//delete blogs

router.delete('/:id', blogController.blog_delete); //(req, res) => {
//     const id = req.params.id;

//     Blog.findByIdAndDelete(id) //note that this utilizes the Blog Prototype's method, findByIdAndDelete which is somewhat self explanatory
//         .then((result) => { //note that this does not redirect immediately, in fact, in node with using the above method, you CANNOT just redirect, res.redirect will NOT work, instead:
//             res.json({ redirect: '/blogs' }) //the backend nodejs looks through the site's JSON and redirects to the directory /blogs after deleting the user specified (by id) blog.
//         })
//         .catch((err) => {
//             console.log(err);
//         })
// })

router.get('/create', (req, res) => {
    res.render('create', { title: 'Create a new Blog' });
})

module.exports = router;